{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Invoke-Tasks Documentation","text":"<p>Welcome to the documentation of the <code>Invoke-Tasks</code> tool. Please check the user guide on the left side for details or search for a topic.</p> <p>Here's   the feature list:</p> <ul> <li>Pure Powershell with a single script and no module/assembly dependency</li> <li>Running tasks in defined order</li> <li>Each task can have one dependency that runs first</li> <li>Capturing multiple output by defining named regexes written into a <code>captured.json</code></li> <li>Tasks can be tagged allowing to filter for tasks</li> <li>Tasks can be skipped</li> <li>It's possible to define task libraries (file as well as folder)</li> <li>Scripts are checked to use API functions only.</li> <li>Invoke-Tasks output can be hidden</li> <li>Task data (hashtable) can be shared accross all tasks</li> <li>Performance output for each individual task</li> </ul>"},{"location":"task-registration/","title":"Task Registration","text":""},{"location":"task-registration/#how-it-works","title":"How it works","text":"<p>The <code>Invoke-Tasks</code> tool provides two functions:</p> <ul> <li><code>Register-Task</code></li> <li><code>Use-Task</code></li> </ul> <p>The first on allows you to define a task and the second one basically also allows you to define task code but here the scope is to reuse a predefined task.</p>"},{"location":"task-registration/#registering-a-task","title":"Registering a task","text":""},{"location":"task-registration/#basic-usage","title":"Basic usage","text":"<p>At the beginning we have a name and a scriptblock. The name has to be unique.  The scriptblock can be any Powershell code. It's advisible to keep such tasks short and understandable. The example is using the script analyzer tool (see https://github.com/PowerShell/PSScriptAnalyzer) to analyze a file. If any record has been found (independent of its severity) then an exception will be thrown which would stop the task processing. It's on you to do the same or - as an example - to continue processing when there are records with severity 'information' only.</p> <pre><code>Register-Task -Name \"Static code analysis\" {\n    $results = Invoke-ScriptAnalyzer ./Invoke-Tasks.ps1\n    $results | Format-Table\n    if ($results.Count -gt 0) {\n        throw \"ScriptAnalyzer has found issues!\"\n    }\n}\n</code></pre> <p>You're not allowed to write other code than calling <code>Register-Task</code> (and <code>Use-Task</code>), so the only code can be in those script blocks. This is by intention.</p>"},{"location":"task-registration/#dependency","title":"Dependency","text":"<p>Each task can have exactly one idea. Reason for this is that <code>Invoke-Tasks</code> does execute all tasks in a defined order and one task at a time only. You can write a task codeblock that does parallel logic as you like but tasks do not. The next example demonstrates how to use it:</p> <pre><code>Register-Task -Name \"Message1\" -DependOn \"Message2\" {\n    Write-Host \"hello world 1!\"\n}\n\nRegister-Task -Name \"Message2\"  {\n    Write-Host \"hello world 2!\"\n}\n</code></pre> <p>No suprise that second message will be printed before the first message. The <code>Invoke-Tasks</code> does check for cyclic dependencies; if you define that those two task depend on each other the tool will stop with an error before any task has been executed.</p>"},{"location":"task-registration/#tags","title":"Tags","text":"<p>You can specify multiple tags at each task with a comma seperated. When call <code>Invoke-Tags</code> with <code>-Tags</code> the tasks are filtered.</p> <pre><code>Register-Task -Name \"Message1\" -Tags first {\n    Write-Host \"hello world 1!\"\n}\n\nRegister-Task -Name \"Message2\" -Tags second  {\n    Write-Host \"hello world 2!\"\n}\n</code></pre> <p>However following important notes:</p> <ul> <li>if you specify more than one tag in <code>-Tags</code> then a task have to contain all those tags otherwise the task won't be executed</li> <li>if a task does match depending on another task the dependency will be executed even its tags do not match.</li> </ul>"},{"location":"task-registration/#skip","title":"Skip","text":"<p>You can add <code>-Skip</code> to a task and then it is not execute. However if an executable task depend on such a task that dependency will be executed.</p>"}]}